/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package laboratoryotomation;

import java.util.ArrayList;
import javax.swing.DefaultListModel;

import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author safiyekantar
 */
public class DoctorPanel extends javax.swing.JFrame {

    private DefaultListModel lstModel = new DefaultListModel();
    ArrayList<Sample> samples = new ArrayList<>();

    /**
     * Creates new form DoctorPanel
     */
    public DoctorPanel() {
        initComponents();
        lstParameter.setModel(lstModel);
        populateTestComboBox();

        lblDate.setText(Login.simulatedDate.toString());
        DataStore.currentDay = Login.simulatedDate.getDayOfYear();

        Timer testTimer = new Timer(20000, e -> {
            Login.simulatedDate = Login.simulatedDate.plusDays(1);
            DataStore.currentDay = Login.simulatedDate.getDayOfYear();
            lblDate.setText(Login.simulatedDate.toString());
        });
        testTimer.start();
    }

    private void populateTestComboBox() {
        cmbAssignTest.removeAllItems();  // clean ComboBox

        // When adding tests, always add a check
        for (String testType : DataStore.testTypes) {
            // If the test is not already added, add it
            if (!isTestInComboBox(testType)) {
                cmbAssignTest.addItem(testType);
            }

        }
    }

    private boolean isTestInComboBox(String testType) {
        // Checks if this test type is in the ComboBox
        for (int i = 0; i < cmbAssignTest.getItemCount(); i++) {
            if (cmbAssignTest.getItemAt(i).equalsIgnoreCase(testType)) {
                return true;
            }
        }
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtPatientId = new javax.swing.JTextField();
        btnAddParameter = new javax.swing.JButton();
        txtNewTest = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnAssign = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstParameter = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        cmbAssignTest = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        btnAddNewTest = new javax.swing.JButton();
        btnShowTestResults = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        lblDate = new javax.swing.JLabel();
        dltBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Patient ID:");

        btnAddParameter.setText("add");
        btnAddParameter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddParameterActionPerformed(evt);
            }
        });

        txtNewTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNewTestActionPerformed(evt);
            }
        });

        jLabel2.setText("Assign Test:");

        btnAssign.setText("assign");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(lstParameter);

        jLabel3.setText("Enter Test Parameter:");

        cmbAssignTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAssignTestActionPerformed(evt);
            }
        });

        jLabel4.setText("Add new Test:");

        btnAddNewTest.setText("Add");
        btnAddNewTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewTestActionPerformed(evt);
            }
        });

        btnShowTestResults.setText("show test reuslts");
        btnShowTestResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowTestResultsActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        dltBtn.setText("delete");
        dltBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dltBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAddParameter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dltBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnExit)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNewTest)
                                    .addComponent(txtPatientId)
                                    .addComponent(cmbAssignTest, 0, 124, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnAssign, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAddNewTest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnShowTestResults))))))
                .addGap(0, 29, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(264, 264, 264)
                .addComponent(lblDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnShowTestResults))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtNewTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddNewTest))
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(btnAssign)
                    .addComponent(cmbAssignTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddParameter)
                    .addComponent(jLabel3)
                    .addComponent(dltBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(btnExit)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNewTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNewTestActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNewTestActionPerformed

    private void btnAddParameterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddParameterActionPerformed
        String parameter = JOptionPane.showInputDialog("Enter test parameter:");
        if (parameter != null && !parameter.trim().isEmpty()) {
            parameter = parameter.trim().toLowerCase();

            // Check the list, if there are the same parameters, warn
            for (int i = 0; i < lstModel.getSize(); i++) {
                String existingParam = ((String) lstModel.get(i)).toLowerCase();
                if (existingParam.equals(parameter)) {
                    JOptionPane.showMessageDialog(this, "This parameter is already added!");
                    return;
                }
            }

            lstModel.addElement(parameter);
        } else {
            JOptionPane.showMessageDialog(null, "Please enter a valid parameter.");
        }

    }//GEN-LAST:event_btnAddParameterActionPerformed

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        String patientName = txtPatientId.getText();
        String testName = cmbAssignTest.getSelectedItem().toString();

        // Here we no longer check if the TextField is empty, we only check the ComboBox, parameters and patient ID.
        if (patientName.isEmpty() || testName.isEmpty() || lstModel.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please complete all fields.");
            return;

        }
        //finde patient
        User foundUser = null;
        for (User p : DataStore.allUsers) {
            if (p.getUsername().equals(patientName)) {
                foundUser = p;
                break;
            }
        }

        if (foundUser == null) {
            JOptionPane.showMessageDialog(this, "Patient not found!");
            return;
        }

        if (!(foundUser instanceof Patient)) {
            JOptionPane.showMessageDialog(this, "This user is not a patient!");
            return;
        }

        Patient patient = (Patient) foundUser; // safe (cast)

        // RULE 1: The same test cannot be assigned to the same patient on the same day.
        for (Sample s : DataStore.allSamples) {
            if (s.getPatient().getUsername().equals(patient.getUsername())
                    && s.getSampleDay() == DataStore.currentDay) {

                for (MedicalTest t : s.getAssignedTests()) {
                    if (t.getTestName().equalsIgnoreCase(testName)) {
                        JOptionPane.showMessageDialog(this, "This test has already been assigned to this patient today.");
                        return;
                    }
                }
            }
        }

        // Create sample and test
        Sample sample = new Sample(patient);
        MedicalTest test = new MedicalTest(testName);

        for (int i = 0; i < lstModel.size(); i++) {
            String paramName = (String) lstModel.get(i);
            TestParameter parameter = new TestParameter(paramName, "");
            test.addParameter(parameter);
        }

        sample.addTest(test);
        samples.add(sample);
        DataStore.allSamples.add(sample); // To keep all examples here too

        System.out.println(DataStore.currentDay + " " + cmbAssignTest.getSelectedItem() + " - Test ID: " + test.getTestID()); // kontrol için log

        JOptionPane.showMessageDialog(this, "Test assigned successfully!\nTest ID: " + test.getTestID());
        lstModel.clear();
        txtPatientId.setText("");
        txtNewTest.setText("");

    }//GEN-LAST:event_btnAssignActionPerformed

    private void btnAddNewTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewTestActionPerformed
        try {
            String newTestType = txtNewTest.getText().trim();

            if (newTestType.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Test name cannot be empty.");
                return;
            }

            // Check if it is present in both combobox and DataStore
            boolean exists = false;

            // 1. Check in Combobox
            for (int i = 0; i < cmbAssignTest.getItemCount(); i++) {
                if (cmbAssignTest.getItemAt(i).equalsIgnoreCase(newTestType)) {
                    exists = true;
                    break;
                }
            }

            // 2. Check in DataStore
            if (DataStore.testTypes.contains(newTestType)) {
                exists = true;
            }

            if (exists) {
                JOptionPane.showMessageDialog(this, "This type of testing already exists.");
            } else {
                DataStore.testTypes.add(newTestType); // add to List
                cmbAssignTest.addItem(newTestType);   // add to combobox
                JOptionPane.showMessageDialog(this, "New test type added.");
                txtNewTest.setText("");               // clean the textField
            }

        } catch (Exception e) {
            // A general error message to the user
            JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
         
        }

    }//GEN-LAST:event_btnAddNewTestActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        Login loginScreen = new Login();
        loginScreen.setVisible(true);

        dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void cmbAssignTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAssignTestActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbAssignTestActionPerformed

    private void btnShowTestResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowTestResultsActionPerformed
        String tc = txtPatientId.getText().trim();

        if (tc.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter the patient ID number.");
            return;
        }

        User selectedUser = null;
        for (User p : DataStore.allUsers) {
            if (p.getUsername().equals(tc)) {
                selectedUser = p;
                break;
            }
        }

        if (selectedUser == null || !(selectedUser instanceof Patient)) {
            JOptionPane.showMessageDialog(this, "No patient with this ID number was found.");
            return;
        }

        Patient patient = (Patient) selectedUser;

        boolean hasAnyTest = false;

        // Check if at least one test is assigned to this patient
        for (Sample s : DataStore.allSamples) {
            if (s.getPatient().equals(patient) && !s.getAssignedTests().isEmpty()) {
                hasAnyTest = true;
                break;
            }
        }

        if (!hasAnyTest) {
            JOptionPane.showMessageDialog(this, "There are no tests available for this patient.");
            return;
        }

        // If test exists, open new window
        DoctorEvaluateFrame evaluateFrame = new DoctorEvaluateFrame();
        evaluateFrame.setSelectedPatient(patient);
        evaluateFrame.setVisible(true);
        evaluateFrame.loadTestData(patient);

    }//GEN-LAST:event_btnShowTestResultsActionPerformed

    private void dltBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dltBtnActionPerformed
        String selectedElement = lstParameter.getSelectedValue();
        if(selectedElement != null){
            lstModel.removeElement(selectedElement);
        }
    }//GEN-LAST:event_dltBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DoctorPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewTest;
    private javax.swing.JButton btnAddParameter;
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnShowTestResults;
    private javax.swing.JComboBox<String> cmbAssignTest;
    private javax.swing.JButton dltBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDate;
    private javax.swing.JList<String> lstParameter;
    private javax.swing.JTextField txtNewTest;
    private javax.swing.JTextField txtPatientId;
    // End of variables declaration//GEN-END:variables
}
